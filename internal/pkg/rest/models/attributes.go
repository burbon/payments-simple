// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Attributes attributes
// swagger:model attributes
type Attributes struct {

	// amount
	// Required: true
	// Min Length: 1
	Amount *string `json:"amount"`

	// currency
	// Required: true
	// Min Length: 1
	Currency *string `json:"currency"`

	// reference
	// Required: true
	// Min Length: 1
	Reference *string `json:"reference"`
}

// Validate validates this attributes
func (m *Attributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attributes) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.MinLength("amount", "body", string(*m.Amount), 1); err != nil {
		return err
	}

	return nil
}

func (m *Attributes) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.MinLength("currency", "body", string(*m.Currency), 1); err != nil {
		return err
	}

	return nil
}

func (m *Attributes) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	if err := validate.MinLength("reference", "body", string(*m.Reference), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Attributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attributes) UnmarshalBinary(b []byte) error {
	var res Attributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
